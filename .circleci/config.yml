version: 2.1

orbs:
  win: circleci/windows@1.0.0

commands:
  common-run_with_cache_for_branch:
    description: "restore your cache, runs your code, and save your cache. key is generated automatically according to your branch"
    parameters:
      key:
        type: string
      steps:
        type: steps
      path:
        type: string
    steps:
      - restore_cache:
          keys:
            - << parameters.key >>-{{ arch }}-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}
            - << parameters.key >>-{{ arch }}-{{ .Environment.CIRCLE_JOB }}
            - << parameters.key >>-{{ arch }}
      - steps: << parameters.steps >>
      - save_cache:
          key: << parameters.key >>-{{ arch }}-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}-{{ .BuildNum }}
          paths:
            - << parameters.path >>

  vcpkg-install_vcpkg:
    steps:
      - run:
          name: "Installing/updating vcpkg"
          shell: bash
          command: "(git clone https://github.com/Microsoft/vcpkg.git && vcpkg/bootstrap-vcpkg.bat) || (cd vcpkg && git pull)"
  vcpkg-install_with_cache:
    description: "install vcpkg packages, and caches the packages"
    parameters:
      packages:
        type: string
      triplet:
        type: string
      recurse:
        type: boolean
        default: true
    steps:
      - common-run_with_cache_for_branch:
          path: vcpkg
          key: vcpkg
          steps:
            - vcpkg-install_vcpkg
            - run: vcpkg/vcpkg.bat install <<# parameters.recurse >> --recurse <</ parameters.recurse >> --triplet << parameters.triplet >> << parameters.packages >>
  msvc-run_with_clcache:
    description: "Installs clcache, runs your code, and saves the cache"
    parameters:
      steps:
        type: steps
      clcache_version:
        type: string
        default: "4.1.0"
    steps:
      - run: nuget install clcache -Version << parameters.clcache_version >>
      - common-run_with_cache_for_branch:
          key: clcache-<< parameters.clcache_version >>
          path: "{{ .Environment.HOME }}/clcache"
          steps:
            - steps: << parameters.steps >>
  lmms-generic_msvc_build:
    parameters:
      platform:
        type: enum
        enum: ["x86", "x64"]

    steps:
      - vcpkg-install_with_cache:
          packages: "fftw3 libsamplerate libsndfile sdl2 qt5"
          triplet: << parameters.platform >>-windows
      - msvc-run_with_clcache:
          steps:
            - run:
                name: "Configuring and building"
                command: |
                  mkdir build && cd build
                  cmake -DUSE_COMPILE_CACHE=ON -DCACHE_TOOL="$(echo clcache.*/clcache-*/clcache.exe)" -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_PREFIX_PATH=c:/Qt/5.12/msvc2017%QT_SUFFIX%;c:/
                  cmake --build . -- /maxcpucount:6
                shell: bash
            - run:
                name: "Building tests"
                command: |
                  cd build
                  cmake --build . --target tests
      - run:
          name: "Building installer"
          command: |
            cd build
            cmake --build . --target package
      - store_artifacts:
          path: 'build\lmms-*.exe'
          destination: /

shared:
  restore_cache: &restore_cache
    restore_cache:
      keys:
        - ccache-{{ arch }}-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}
        - ccache-{{ arch }}-{{ .Environment.CIRCLE_JOB }}
        - ccache-{{ arch }}
  save_cache: &save_cache
    save_cache:
      key: ccache-{{ arch }}-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}-{{ .BuildNum }}
      paths:
        - ~/.ccache
  restore_homebrew_cache: &restore_homebrew_cache
    restore_cache:
      keys:
        - homebrew-{{ arch }}-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}
        - homebrew-{{ arch }}-{{ .Environment.CIRCLE_JOB }}
        - homebrew-{{ arch }}
  save_homebrew_cache: &save_homebrew_cache
    save_cache:
      key: homebrew-{{ arch }}-{{ .Environment.CIRCLE_JOB }}-{{ .Branch }}-{{ .BuildNum }}
      paths:
        - ~/Library/Caches/Homebrew
        - /usr/local/Homebrew

  ccache_stats: &ccache_stats
    run:
      name: Print ccache statistics
      command: |
        echo "[ccache config]"
        ccache -p
        echo "[ccache stats]"
        ccache -s

  # Commmon initializing commands
  init: &init
    run:
      name: Initialize
      command: |
        mkdir -p /tmp/artifacts
        # Workaround for failing submodule fetching
        git config --global --unset url."ssh://git@github.com".insteadOf || true

  # Commmon environment variables
  common_environment: &common_environment
    QT5: True
    CMAKE_OPTS: -DUSE_WERROR=ON -DCMAKE_BUILD_TYPE=RelWithDebInfo -DUSE_CCACHE=ON
    CCACHE_MAXSIZE: 500M
    CCACHE_LOGFILE: /tmp/artifacts/ccache.log
    MAKEFLAGS: -j6

jobs:
  mingw32:
    environment:
      <<: *common_environment
    docker:
      - image: lmmsci/linux.mingw32:18.04
    steps:
      - checkout
      - *init
      - *restore_cache
      - run:
          name: Building
          command: |
            mkdir build && cd build
            ../cmake/build_win32.sh
            make lmms
            make
      - run:
          name: Build tests
          command: cd build && make tests
      - run:
          name: Build installer
          command: |
            cd build
            make package
            cp ./lmms-*.exe /tmp/artifacts/
      - store_artifacts:
          path: /tmp/artifacts/
          destination: /
      - *ccache_stats
      - *save_cache
  mingw64:
    environment:
      <<: *common_environment
    docker:
      - image: lmmsci/linux.mingw64:18.04
    steps:
      - checkout
      - *init
      - *restore_cache
      - run:
          name: Building
          command: |
            mkdir build && cd build
            ../cmake/build_win64.sh
            make
      - run:
          name: Build tests
          command: cd build && make tests
      - run:
          name: Build installer
          command: |
            cd build
            make package
            cp ./lmms-*.exe /tmp/artifacts/
      - store_artifacts:
          path: /tmp/artifacts/
          destination: /
      - *ccache_stats
      - *save_cache
  linux-gcc:
    docker:
      - image: lmmsci/linux.gcc:xenial
    environment:
      <<: *common_environment
    steps:
      - checkout
      - *init
      - *restore_cache
      - run:
          name: Configure
          command: mkdir build && cd build && cmake .. $CMAKE_OPTS -DCMAKE_INSTALL_PREFIX=./install
      - run:
          name: Build
          command: cd build && make
      - run:
          name: Build tests
          command: cd build && make tests
      - run:
          name: Run tests
          command: build/tests/tests
      - *ccache_stats
      - run:
          name: Build AppImage
          command: |
            cd build
            make install
            make appimage || (cat appimage.log && false)
            cp ./lmms-*.AppImage /tmp/artifacts/
      - store_artifacts:
          path: /tmp/artifacts/
          destination: /
      - store_artifacts:
          path: build/appimage.log
          destination: /
      - *save_cache
  shellcheck:
    docker:
      - image: koalaman/shellcheck-alpine:v0.4.6
    steps:
      - checkout
      - run:
          name: Shellcheck
          command: shellcheck $(find "./cmake/" -type f -name '*.sh' -o -name "*.sh.in")
  macos:
    environment:
      <<: *common_environment
    macos:
      xcode: "9.3.1"
    steps:
      - checkout
      - *init
      - *restore_homebrew_cache
      - *restore_cache
      - run:
          name: Install Homebrew dependencies
          command: brew update && brew install ccache fftw cmake pkg-config libogg libvorbis lame libsndfile libsamplerate jack sdl libgig libsoundio stk fluid-synth portaudio fltk qt5 carla
      - run:
          name: Install nodejs dependencies
          command: npm install -g appdmg
      - run:
          name: Building
          command: |
            mkdir build && cd build
            cmake .. -DCMAKE_INSTALL_PREFIX="../target" -DCMAKE_PREFIX_PATH="$(brew --prefix qt5)" $CMAKE_OPTS
            make
      - run:
          name: Build tests
          command: cd build && make tests
      - run:
          name: Run tests
          command: build/tests/tests
      - run:
          name: Build DMG
          command: |
            cd build
            make install
            make dmg
            cp ./lmms-*.dmg /tmp/artifacts/
      - store_artifacts:
          path: /tmp/artifacts/
          destination: /
      - *save_cache
      - *save_homebrew_cache
  MSVC32:
    executor: win/vs2019
    steps:
      - checkout
      - lmms-generic_msvc_build:
          platform: "x86"
  MSVC64:
    executor: win/vs2019
    steps:
      - checkout
      - lmms-generic_msvc_build:
          platform: "x64"
 
workflows:
  version: 2
  build-and-test:
    jobs:
      - macos
      - mingw32
      - mingw64
      - linux-gcc
      - shellcheck
      - MSVC32
      - MSVC64