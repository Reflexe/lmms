name: Windows
on:
  - push
  - pull_request
jobs:
  msvc:
    env:
      QT_VERSION: 5.14.0
      CLCACHE_DIR: C:/clcache
      BITNESS: ${{ matrix.os_version }}
      PLATFORM: $(if ($env:BITNESS -eq "32") { "x86" } else { "x64" })
      CMAKE_PLATFORM: $(if ($env:BITNESS -eq "64") { "x64" } else { "Win32" })
      QT_PLATFORM: $(if ($env:BITNESS -eq "64") { "msvc2017_64" } else { "msvc2017" })

    runs-on: windows-latest
    steps:
      - run: echo $env:PLATFORM
      - run: echo (Invoke-Expression($env:PLATFORM))
      - uses: actions/checkout@v1
      - name: Cache vcpkg packages
        uses: actions/cache@preview
        with:
          path: "C:/vcpkg/installed"
          key: vcpkg-${{ matrix.os_version }}-${{ github.ref }}
          restore-keys: |
            vcpkg-${{ matrix.os_version }}-
      - uses: actions/cache@preview
        with:
          path: "C:/clcache"
          key: clcache-msvc-${{ matrix.os_version }}-${{ github.ref }}
          restore-keys: |
            clcache-msvc-${{ matrix.os_version }}-
      - name: qt cache
        uses: actions/cache@preview
        with:
          path: "C:/Qt"
          key: qt-${{ matrix.os_version }}-${{ github.ref }}
          restore-keys: |
            qt-${{ matrix.os_version }}-
      - name: Install Qt
        run: |
          if ( -not (Test-Path C:\Qt\Qt$env:QT_VERSION\$env:QT_VERSION) ) {
            pip install aqtinstall
            python -m aqt install --outputdir C:\Qt $env:QT_VERSION windows desktop win32_msvc2017
            if ($env:BITNESS -eq "64") {
              python -m aqt install --outputdir C:\Qt $env:QT_VERSION windows desktop win64_msvc2017_64
            }
          }

          dir C:\Qt\Qt$env:QT_VERSION\$env:QT_VERSION
      - name: Install dependencies
        run: |
          vcpkg install --triplet "$(Invoke-Expression($env:PLATFORM))-windows" --recurse fftw3 libsamplerate libsndfile sdl2
          pip install clcache
      - name: Configure
        continue-on-error: true
        run: |
          cmake -G "Visual Studio 16 2019" -DCMAKE_GENERATOR_PLATFORM="$(Invoke-Expression($env:CMAKE_PLATFORM))" `
            -S "$env:GITHUB_WORKSPACE" -B "$env:GITHUB_WORKSPACE/build" `
            -DUSE_COMPILE_CACHE=ON                                      `
            -DCMAKE_BUILD_TYPE=RelWithDebInfo                           `
            -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_INSTALLATION_ROOT"\scripts\buildsystems\vcpkg.cmake `
            -DCMAKE_PREFIX_PATH=c:/Qt/Qt"$env:QT_VERSION"/"$env:QT_VERSION"/$(Invoke-Expression($env:QT_PLATFORM))
      - name: Build
        continue-on-error: true
        run: |
          cmake --build "$env:GITHUB_WORKSPACE/build" -- /maxcpucount:4
      - name: Create Installer
        continue-on-error: true
        run: |
          cmake --build "$env:GITHUB_WORKSPACE/build" --target package
          mkdir C:\artifacts
          cp "'$env:GITHUB_WORKSPACE'/build/lmms-*.exe" -Destination C:\artifacts
      - name: Upload artifact
        uses: actions/upload-artifact@v1.0.0
        continue-on-error: true
        with:
          name: "Installer"
          path:  C:\artifacts
    strategy:
      matrix:
        os_version: [32, 64]
